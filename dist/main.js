(()=>{"use strict";var e={183:(e,n,t)=>{t.d(n,{Z:()=>s});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([e.id,"body {\n    display:flex;\n    height:100%;\n    width:100%;\n    justify-content: space-evenly;\n    align-items:center;\n    position:absolute;\n}\n\n.mainContainer{\n    display:flex;\n    flex-direction: column;\n    height:80%;\n    width:80%;\n}\n\n.mainHeader {\n    height:10%;\n}\n\n\n\n.mainBody{\n    color:red;\n    display:flex;\n    justify-content: space-evenly;\n    height:100%;\n    \n}\n\n.gridContainer{\n    display:flex;\n    height:60%;\n    width:100%;\n    flex-direction: column;\n\n}\n\n.namePlate {\n    display:flex;\n    height:20%;\n    margin:10px;\n}\n\n.gameGrid {\n    display:grid;\n    grid-template-columns: repeat(10,50px);\n    grid-template-rows: repeat(10,50px);\n    height:80%;\n    width:100%;\n\n}\n\n.box0{\n    border: 1px solid black;\n}\n.box0:hover{\n    background-color: blanchedalmond;\n}\n\n\n.box1{\n    border: 1px solid cyan;\n    background:cyan;\n}\n\n.box2{\n    border: 1px solid red;\n    background:red;\n}\n","",{version:3,sources:["webpack://./src/mainContainer.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,WAAW;IACX,UAAU;IACV,6BAA6B;IAC7B,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,sBAAsB;IACtB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,UAAU;AACd;;;;AAIA;IACI,SAAS;IACT,YAAY;IACZ,6BAA6B;IAC7B,WAAW;;AAEf;;AAEA;IACI,YAAY;IACZ,UAAU;IACV,UAAU;IACV,sBAAsB;;AAE1B;;AAEA;IACI,YAAY;IACZ,UAAU;IACV,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,sCAAsC;IACtC,mCAAmC;IACnC,UAAU;IACV,UAAU;;AAEd;;AAEA;IACI,uBAAuB;AAC3B;AACA;IACI,gCAAgC;AACpC;;;AAGA;IACI,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,cAAc;AAClB",sourcesContent:["body {\n    display:flex;\n    height:100%;\n    width:100%;\n    justify-content: space-evenly;\n    align-items:center;\n    position:absolute;\n}\n\n.mainContainer{\n    display:flex;\n    flex-direction: column;\n    height:80%;\n    width:80%;\n}\n\n.mainHeader {\n    height:10%;\n}\n\n\n\n.mainBody{\n    color:red;\n    display:flex;\n    justify-content: space-evenly;\n    height:100%;\n    \n}\n\n.gridContainer{\n    display:flex;\n    height:60%;\n    width:100%;\n    flex-direction: column;\n\n}\n\n.namePlate {\n    display:flex;\n    height:20%;\n    margin:10px;\n}\n\n.gameGrid {\n    display:grid;\n    grid-template-columns: repeat(10,50px);\n    grid-template-rows: repeat(10,50px);\n    height:80%;\n    width:100%;\n\n}\n\n.box0{\n    border: 1px solid black;\n}\n.box0:hover{\n    background-color: blanchedalmond;\n}\n\n\n.box1{\n    border: 1px solid cyan;\n    background:cyan;\n}\n\n.box2{\n    border: 1px solid red;\n    background:red;\n}\n"],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(a[u]=!0)}for(var c=0;c<e.length;c++){var l=[].concat(e[c]);r&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),i&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=i):l[4]="".concat(i)),n.push(l))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},a=[],s=0;s<e.length;s++){var u=e[s],c=r.base?u[0]+r.base:u[0],l=o[c]||0,p="".concat(c," ").concat(l);o[c]=l+1;var d=t(p),h={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)n[d].references++,n[d].updater(h);else{var A=i(h,r);r.byIndex=s,n.splice(s,0,{identifier:p,updater:A,references:1})}a.push(p)}return a}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var o=r(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=t(o[a]);n[s].references--}for(var u=r(e,i),c=0;c<o.length;c++){var l=t(o[c]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}o=u}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(379),n=t.n(e),r=t(795),i=t.n(r),o=t(569),a=t.n(o),s=t(565),u=t.n(s),c=t(216),l=t.n(c),p=t(589),d=t.n(p),h=t(183),A={};A.styleTagTransform=d(),A.setAttributes=u(),A.insert=a().bind(null,"head"),A.domAPI=i(),A.insertStyleElement=l(),n()(h.Z,A),h.Z&&h.Z.locals&&h.Z.locals;class f{constructor(){this.board=new Array(10).fill().map((()=>new Array(10).fill(0))),this.size=10,this.orientation="Y",this.ships=[],this.cpu=!1,this.name=""}placeShip(e,n){let t=this.board,r=e.length,i=this.orientation,o=parseInt(n[0]),a=parseInt(n[1]);if("X"===i){if(!0===function(e,n,t){let r=e[0],i=e[1];if(0!==t[r][i])return!1;for(let e=0;e<n;e++)if(r+e>9||0!==t[r+e][i])return!1;return!0}(n,r,t)){this.ships.push(e);for(let n=0;n<r;n++)t[o+n][a]=e,e.placed=!0}}else if("Y"===i&&!0===function(e,n,t){let r=e[0],i=e[1];if(0!==t[r][i])return!1;for(let e=0;e<n;e++)if(0!==t[r][i-e]||i-e<0)return!1;return!0}(n,r,t)){this.ships.push(e);for(let n=0;n<r;n++)t[o][a-n]=e,e.placed=!0}return!1}receiveAttack(e){let n=e[0],t=e[1],r=this.board;return 0===r[n][t]?r[n][t]=1:1!==r[n][t]&&2!==r[n][t]&&(r[n][t].hit(),void(r[n][t]=2))}checkAllSunk(){for(let e=0;e<this.ships.length;e++)if(!1===this.ships[e].sunkStatus)return!1;return!0}}class m{constructor(e,n){this.ship=e,this.length=n,this.hits=0,this.sunkStatus=!1,this.placed=!1}hit(){if(!0===this.sunkStatus)throw Error("ship has already sustained max dmg");if(this.hits+=1,this.hits===this.length)return this.isSunk(),console.log(`you just sunk a ${this.ship}!!!!`),this.sunkStatus}isSunk(){return this.hits===this.length&&(this.sunkStatus=!0),this.sunkStatus}}function C(){let e=[0,0];return e[0]=Math.floor(10*Math.random()),e[1]=Math.floor(10*Math.random()),e}function g(){let e="";return e=Math.floor(10*Math.random())>4?"Y":"X",e}let y=document.getElementById("p1Grid"),v=document.getElementById("p2Grid");function b(){for(;y.firstChild;)y.removeChild(y.firstChild);for(;v.firstChild;)v.removeChild(v.firstChild)}function I(e){let n=document.createElement("div");n.className="box0",n.innerHTML=`${e}`;let t=document.createElement("div");t.className="box1";let r=document.createElement("div");return r.className="box2",2==e?r:1==e?t:n}let x=new class{constructor(){this.p1=new f,this.p2=new f,this.p1RdyStatus=!1,this.p2RdyStatus=!1,this.p1Queue,this.p2Queue}generateShipQueue(){let e=new m("Carrier",5),n=new m("Battleship",4),t=new m("Destroyer",3),r=new m("Submarine",3);return[new m("Patrol Boat",2),r,t,n,e]}autoGenerate(e,n,t){for(;!1===t;){let r=n[n.length-1];for(;!1===r.placed;){let n=g();e.orientation=n;let t=C();e.placeShip(r,t)}n.pop(),void 0===n[n.length-1]&&(t=!0)}}p1PlaceShip(e){let n=this.p1Queue[this.p1Queue.length-1];return this.p1.placeShip(n,e),!1===n.placed?"not successfully placed":(this.p1Queue.pop(),void 0===this.p1Queue[this.p1Queue.length-1]?(this.autoGenerate(this.p2,this.p2Queue,this.p2RdyStatus),this.p1RdyStatus=!0):void 0)}p1MakeAttack(e){if(this.p2.board[e[0]][e[1]]>0)return"pick a new spot";if(this.p2.receiveAttack(e),this.p2.checkAllSunk())return this.winnerFound(this.p1);if(!0===this.p2.cpu){let e=C();for(;this.p1.board[e[0]][e[1]]>0;)console.log(this.p1.board[e[0]][e[1]]),e=C();if(this.p1.receiveAttack(e),this.p1.checkAllSunk())return this.winnerFound(this.p2)}}winnerFound(e){console.log(e.name),alert(`${e.name} WINS!!`)}resetBoard(){this.p1=new f,this.p2=new f,this.p1RdyStatus=!1,this.p2RdyStatus=!1,this.p1Queue=[],this.p2Queue=[]}};x.p1Queue=x.generateShipQueue(),x.p2Queue=x.generateShipQueue(),x.autoGenerate(x.p1,x.p1Queue,x.p1RdyStatus),x.autoGenerate(x.p2,x.p2Queue,x.p2RdyStatus),x.p2.cpu=!0,x.p1.name="PLAYER 1",function e(n){let t=n.p1.board.flat(),r=n.p2.board.flat();const i=function(){let e=[];for(let n=0;n<10;n++)for(let t=0;t<10;t++){let r="a"+n+t;e.push(r)}return e}();for(let o=0;o<100;o++){let a=I(t[o]);a.setAttribute("id",`${i[o]}`);let s=I(r[o]);s.setAttribute("id",`${i[o]}`),s.addEventListener("click",(()=>{n.p1MakeAttack([`${i[o][1]}`,`${i[o][2]}`]),b(),e(n)})),y.appendChild(a),v.appendChild(s)}}(x)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,