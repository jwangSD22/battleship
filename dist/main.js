(()=>{"use strict";var n={183:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([n.id,"body {\n    background-color: darkblue;\n    color:aliceblue;\n    display:flex;\n    height:100%;\n    width:100%;\n    justify-content: space-evenly;\n    align-items:center;\n    position:absolute;\n}\n\n\n.mainContainer{\n    display:flex;;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height:80%;\n    width:80%;\n}\n\n.mainHeader {\n    height:10%;\n}\n\n.msgBox{\n    font-size: 4rem;\n}\n\n\n.mainBody{\n    \n    display:none;\n    justify-content: space-evenly;\n    height:100%;\n    align-items: center;\n    \n}\n\n\n.namePlate{\n    display:flex;\n    align-items: center;\n}\n\n.gridContainer{\n    display:flex;\n    justify-content: center;\n    align-items:center;\n    height:80%;\n    width:100%;\n    flex-direction: column;\n    \n\n}\n\n.invisDiv {\n    width:100px;\n    height:200px;\n}\n\n.namePlate {\n    display:flex;\n    height:20%;\n    margin:10px;\n}\n\n.gameGrid {\n    display:grid;\n    rotate: -90deg;\n    grid-template-columns: repeat(10,50px);\n    grid-template-rows: repeat(10,50px);\n    height:500px;\n    width:500px;\n    border:1px solid pink;\n\n}\n\n.box0{\n    border: 1px solid black;\n}\n.box0:hover{\n    background-color: blanchedalmond;\n    cursor:grab;\n}\n\n\n.box1{\n    border: 1px solid cyan;\n    background:cyan;\n}\n\n.box2{\n    border: 1px solid red;\n    background:red;\n}\n","",{version:3,sources:["webpack://./src/mainContainer.css"],names:[],mappings:"AAAA;IACI,0BAA0B;IAC1B,eAAe;IACf,YAAY;IACZ,WAAW;IACX,UAAU;IACV,6BAA6B;IAC7B,kBAAkB;IAClB,iBAAiB;AACrB;;;AAGA;IACI,YAAY;IACZ,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;IACnB,UAAU;IACV,SAAS;AACb;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,eAAe;AACnB;;;AAGA;;IAEI,YAAY;IACZ,6BAA6B;IAC7B,WAAW;IACX,mBAAmB;;AAEvB;;;AAGA;IACI,YAAY;IACZ,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,uBAAuB;IACvB,kBAAkB;IAClB,UAAU;IACV,UAAU;IACV,sBAAsB;;;AAG1B;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,UAAU;IACV,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,cAAc;IACd,sCAAsC;IACtC,mCAAmC;IACnC,YAAY;IACZ,WAAW;IACX,qBAAqB;;AAEzB;;AAEA;IACI,uBAAuB;AAC3B;AACA;IACI,gCAAgC;IAChC,WAAW;AACf;;;AAGA;IACI,sBAAsB;IACtB,eAAe;AACnB;;AAEA;IACI,qBAAqB;IACrB,cAAc;AAClB",sourcesContent:["body {\n    background-color: darkblue;\n    color:aliceblue;\n    display:flex;\n    height:100%;\n    width:100%;\n    justify-content: space-evenly;\n    align-items:center;\n    position:absolute;\n}\n\n\n.mainContainer{\n    display:flex;;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    height:80%;\n    width:80%;\n}\n\n.mainHeader {\n    height:10%;\n}\n\n.msgBox{\n    font-size: 4rem;\n}\n\n\n.mainBody{\n    \n    display:none;\n    justify-content: space-evenly;\n    height:100%;\n    align-items: center;\n    \n}\n\n\n.namePlate{\n    display:flex;\n    align-items: center;\n}\n\n.gridContainer{\n    display:flex;\n    justify-content: center;\n    align-items:center;\n    height:80%;\n    width:100%;\n    flex-direction: column;\n    \n\n}\n\n.invisDiv {\n    width:100px;\n    height:200px;\n}\n\n.namePlate {\n    display:flex;\n    height:20%;\n    margin:10px;\n}\n\n.gameGrid {\n    display:grid;\n    rotate: -90deg;\n    grid-template-columns: repeat(10,50px);\n    grid-template-rows: repeat(10,50px);\n    height:500px;\n    width:500px;\n    border:1px solid pink;\n\n}\n\n.box0{\n    border: 1px solid black;\n}\n.box0:hover{\n    background-color: blanchedalmond;\n    cursor:grab;\n}\n\n\n.box1{\n    border: 1px solid cyan;\n    background:cyan;\n}\n\n.box2{\n    border: 1px solid red;\n    background:red;\n}\n"],sourceRoot:""}]);const s=a},686:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([n.id,".openingContainer{\n     \n    display:flex;\n    justify-content: space-evenly;\n    height:100%;\n    align-items: center;\n}\n\n#startGameButton{\n    display:flex;\n    border-radius: 10%;\n    background-color: green;\n    align-items: center;\n    justify-content: center;\n    width:300px;\n    height:150px;\n}\n\n#startGameButton:hover{\n    cursor:grab;\n    background-color: greenyellow;\n}","",{version:3,sources:["webpack://./src/openContainer.css"],names:[],mappings:"AAAA;;IAEI,YAAY;IACZ,6BAA6B;IAC7B,WAAW;IACX,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,uBAAuB;IACvB,mBAAmB;IACnB,uBAAuB;IACvB,WAAW;IACX,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,6BAA6B;AACjC",sourcesContent:[".openingContainer{\n     \n    display:flex;\n    justify-content: space-evenly;\n    height:100%;\n    align-items: center;\n}\n\n#startGameButton{\n    display:flex;\n    border-radius: 10%;\n    background-color: green;\n    align-items: center;\n    justify-content: center;\n    width:300px;\n    height:150px;\n}\n\n#startGameButton:hover{\n    cursor:grab;\n    background-color: greenyellow;\n}"],sourceRoot:""}]);const s=a},811:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),i=t.n(r),o=t(645),a=t.n(o)()(i());a.push([n.id,".placementMsgBox {\n    font-size: 2rem;\n    display:flex;\n    align-items:center;\n    justify-content: center;\n    width:500px;\n    height:50px;\n}\n\n.placementContainer{\n     \n    display:none;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height:100%;\n    align-items: center;\n}\n\n#placeGrid {\n    rotate: -90deg;\n}\n\n.placeDiv {\n    border: 1px solid pink;\n}\n\n.placeDivHov{\n    border: 1px solid pink;\n    background-color: blanchedalmond;\n}\n\n.alreadyPlaced {\n    background-color: red;\n}\n\n.orientationButton {\n    display:flex;\n    cursor:grab;\n    justify-content: center;\n    align-items: center;\n    border-radius: 10%;\n    width:200px;\n    height:50px;\n    color:red;\n    font-weight: bold;\n    background-color: aqua;\n}\n\n.orientationButton:hover {\nbackground-color: rgb(250, 101, 255);\ncursor:grab;\n}\n","",{version:3,sources:["webpack://./src/placementContainer.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,YAAY;IACZ,kBAAkB;IAClB,uBAAuB;IACvB,WAAW;IACX,WAAW;AACf;;AAEA;;IAEI,YAAY;IACZ,sBAAsB;IACtB,6BAA6B;IAC7B,WAAW;IACX,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;IACtB,gCAAgC;AACpC;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,uBAAuB;IACvB,mBAAmB;IACnB,kBAAkB;IAClB,WAAW;IACX,WAAW;IACX,SAAS;IACT,iBAAiB;IACjB,sBAAsB;AAC1B;;AAEA;AACA,oCAAoC;AACpC,WAAW;AACX",sourcesContent:[".placementMsgBox {\n    font-size: 2rem;\n    display:flex;\n    align-items:center;\n    justify-content: center;\n    width:500px;\n    height:50px;\n}\n\n.placementContainer{\n     \n    display:none;\n    flex-direction: column;\n    justify-content: space-evenly;\n    height:100%;\n    align-items: center;\n}\n\n#placeGrid {\n    rotate: -90deg;\n}\n\n.placeDiv {\n    border: 1px solid pink;\n}\n\n.placeDivHov{\n    border: 1px solid pink;\n    background-color: blanchedalmond;\n}\n\n.alreadyPlaced {\n    background-color: red;\n}\n\n.orientationButton {\n    display:flex;\n    cursor:grab;\n    justify-content: center;\n    align-items: center;\n    border-radius: 10%;\n    width:200px;\n    height:50px;\n    color:red;\n    font-weight: bold;\n    background-color: aqua;\n}\n\n.orientationButton:hover {\nbackground-color: rgb(250, 101, 255);\ncursor:grab;\n}\n"],sourceRoot:""}]);const s=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);r&&a[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(i," */"),a=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(a).concat([o]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var o={},a=[],s=0;s<n.length;s++){var l=n[s],c=r.base?l[0]+r.base:l[0],A=o[c]||0,u="".concat(c," ").concat(A);o[c]=A+1;var d=t(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)e[d].references++,e[d].updater(p);else{var h=i(p,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var o=r(n=n||[],i=i||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var s=t(o[a]);e[s].references--}for(var l=r(n,i),c=0;c<o.length;c++){var A=t(o[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}o=l}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={id:r,exports:{}};return n[r](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),i=t.n(r),o=t(569),a=t.n(o),s=t(565),l=t.n(s),c=t(216),A=t.n(c),u=t(589),d=t.n(u),p=t(686),h={};h.styleTagTransform=d(),h.setAttributes=l(),h.insert=a().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=A(),e()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;var m=t(183),f={};f.styleTagTransform=d(),f.setAttributes=l(),f.insert=a().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=A(),e()(m.Z,f),m.Z&&m.Z.locals&&m.Z.locals;var g=t(811),C={};C.styleTagTransform=d(),C.setAttributes=l(),C.insert=a().bind(null,"head"),C.domAPI=i(),C.insertStyleElement=A(),e()(g.Z,C),g.Z&&g.Z.locals&&g.Z.locals;class B{constructor(){this.board=new Array(10).fill().map((()=>new Array(10).fill(0))),this.size=10,this.orientation="Y",this.ships=[],this.cpu=!1,this.name=""}placeShip(n,e){let t=this.board,r=n.length,i=this.orientation,o=parseInt(e[0]),a=parseInt(e[1]);if("X"===i){if(!0===function(n,e,t){let r=parseInt(n[0]),i=parseInt(n[1]);if(0!==t[r][i])return!1;for(let n=0;n<e;n++)if(r+n>9||0!==t[r+n][i])return!1;return!0}(e,r,t)){this.ships.push(n);for(let e=0;e<r;e++)t[o+e][a]=n,n.placed=!0}}else if("Y"===i&&!0===function(n,e,t){let r=parseInt(n[0]),i=parseInt(n[1]);if(0!==t[r][i])return!1;for(let n=0;n<e;n++)if(0!==t[r][i-n]||i-n<0)return!1;return!0}(e,r,t)){this.ships.push(n);for(let e=0;e<r;e++)t[o][a-e]=n,n.placed=!0}return!1}receiveAttack(n){let e=parseInt(n[0]),t=parseInt(n[1]),r=this.board;return 0===r[e][t]?r[e][t]=1:1!==r[e][t]&&2!==r[e][t]&&(r[e][t].hit(),void(r[e][t]=2))}checkAllSunk(){for(let n=0;n<this.ships.length;n++)if(!1===this.ships[n].sunkStatus)return!1;return!0}}class y{constructor(n,e){this.ship=n,this.length=e,this.hits=0,this.sunkStatus=!1,this.placed=!1}hit(){if(!0===this.sunkStatus)throw Error("ship has already sustained max dmg");if(this.hits+=1,this.hits===this.length)return this.isSunk(),console.log(`you just sunk a ${this.ship}!!!!`),this.sunkStatus}isSunk(){return this.hits===this.length&&(this.sunkStatus=!0),this.sunkStatus}}class I{constructor(){this.p1=new B,this.p2=new B,this.p1RdyStatus=!1,this.p2RdyStatus=!1,this.p1Queue,this.p2Queue}generateShipQueue(){let n=new y("Carrier",5),e=new y("Battleship",4),t=new y("Destroyer",3),r=new y("Submarine",3);return[new y("Patrol Boat",2),r,t,e,n]}autoGenerate(n,e,t){for(;!1===t;){let r=e[e.length-1];for(;!1===r.placed;){let e=b();n.orientation=e;let t=v();n.placeShip(r,t)}e.pop(),void 0===e[e.length-1]&&(t=!0)}}p1PlaceShip(n){let e=this.p1Queue[this.p1Queue.length-1];return this.p1.placeShip(e,n),!1===e.placed?console.log("not successfully placed"):(this.p1Queue.pop(),void 0===this.p1Queue[this.p1Queue.length-1]?(this.autoGenerate(this.p2,this.p2Queue,this.p2RdyStatus),this.p2RdyStatus=!0,this.p1RdyStatus=!0):void 0)}p1MakeAttack(n){if(this.p2.board[n[0]][n[1]]>0)return console.log("pick another spot");if(this.p2.receiveAttack(n),this.p2.checkAllSunk())return this.winnerFound(this.p1);if(!0===this.p2.cpu){let n=v();for(;this.p1.board[n[0]][n[1]]>0;)console.log(this.p1.board[n[0]][n[1]]),n=v();if(this.p1.receiveAttack(n),this.p1.checkAllSunk())return this.winnerFound(this.p2)}}winnerFound(n){console.log(n.name),alert(`${n.name} WINS!!`)}resetBoard(){this.p1=new B,this.p2=new B,this.p1RdyStatus=!1,this.p2RdyStatus=!1,this.p1Queue=[],this.p2Queue=[]}}function v(){let n=[0,0];return n[0]=Math.floor(10*Math.random()),n[1]=Math.floor(10*Math.random()),n}function b(){let n="";return n=Math.floor(10*Math.random())>4?"Y":"X",n}let x=document.getElementById("p1Grid"),k=document.getElementById("p2Grid");function E(n){let e=n.p1.board.flat(),t=n.p2.board.flat();const r=w();for(let i=0;i<100;i++){let o=W(e[i]);o.setAttribute("id",`${r[i]}`);let a=W(t[i]);a.setAttribute("id",`${r[i]}`),a.addEventListener("click",(()=>{n.p1MakeAttack([`${r[i][1]}`,`${r[i][2]}`]),S(),E(n)})),x.appendChild(o),k.appendChild(a)}}function S(){for(;x.firstChild;)x.removeChild(x.firstChild);for(;k.firstChild;)k.removeChild(k.firstChild)}function w(){let n=[];for(let e=0;e<10;e++)for(let t=0;t<10;t++){let r="a"+e+t;n.push(r)}return n}function Y(){let n=document.querySelector(".openingContainer"),e=document.querySelector(".placementContainer");n.style.display="none",e.style.display="flex";let t=new I;t.p1Queue=t.generateShipQueue(),t.p2Queue=t.generateShipQueue(),t.p2.cpu=!0,t.p1.name="PLAYER 1",j(t),document.querySelector(".orientationButton").addEventListener("click",(()=>{!function(n){"Y"===n.p1.orientation?n.p1.orientation="X":n.p1.orientation="Y"}(t),j(t)}))}function W(n){let e=document.createElement("div");e.className="box0",e.innerHTML=`${n}`;let t=document.createElement("div");t.className="box1";let r=document.createElement("div");return r.className="box2",2==n?r:1==n?t:e}function j(n){!function(){let n=document.getElementById("placeGrid");for(;n.firstChild;)n.removeChild(n.firstChild)}();const e=w();let t=n.p1Queue[n.p1Queue.length-1],r=n.p1.board.flat(),i=document.getElementById("placeGrid"),o=document.querySelector(".placementMsgBox");for(let o=0;o<100;o++){let a=e[o][1],s=e[o][2],l=document.createElement("div");l.setAttribute("id",`${e[o]}`),l.className="placeDiv",n.p1Queue[0]&&Z(l,t.length,n.p1.orientation),l.addEventListener("click",(()=>{n.p1PlaceShip([a,s]),j(n)})),"object"==typeof r[o]?(l.className="alreadyPlaced",i.appendChild(l)):(i.appendChild(l),l.innerText=`${e[o]}`)}if(void 0===n.p1Queue[n.p1Queue.length-1])return function(n){let e=document.querySelector(".mainBody"),t=document.querySelector(".placementContainer"),r=document.querySelector(".placementMsgBox");r.innerHTML="";let i=document.createElement("div");i.id="startBtn",i.innerText="Start Battle!";let o=document.createElement("div");o.id=o,o.innerText="Reset Board",i.addEventListener("click",(()=>{t.style.display="none",e.style.display="flex",E(n)})),r.appendChild(i),r.appendChild(o)}(n),console.log("ready!");o.innerText=`Place your ${t.ship} (${t.length})`}function Z(n,e,t){return n.addEventListener("mouseover",(()=>{if("X"===t){let t=parseInt(n.id[1]),r=parseInt(n.id[2]);for(let n=0;n<e;n++){if(t+n>9)return;let e=document.getElementById(`a${t+n}${r}`);if("alreadyPlaced"===e.className)return;e.className="placeDivHov"}}if("Y"===t){let t=n.id[1],r=n.id[2];for(let n=0;n<e;n++){if(r-n<0)return;let e=document.getElementById(`a${t}${r-n}`);if("alreadyPlaced"===e.className)return;e.className="placeDivHov"}}})),n.addEventListener("mouseout",(()=>{if("X"===t){let t=parseInt(n.id[1]),r=parseInt(n.id[2]);for(let n=0;n<e;n++){if(t+n>9)return;let e=document.getElementById(`a${t+n}${r}`);if("alreadyPlaced"===e.className)return;e.className="placeDiv"}}if("Y"===t){let t=n.id[1],r=n.id[2];for(let n=0;n<e;n++){if(r-n<0)return;let e=document.getElementById(`a${t}${r-n}`);if("alreadyPlaced"===e.className)return;e.className="placeDiv"}}})),n}!function(){let n=document.querySelector(".openingContainer");console.log(n);let e=document.createElement("div");e.id="startGameButton",e.innerText="START GAME",e.addEventListener("click",Y),n.appendChild(e)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,